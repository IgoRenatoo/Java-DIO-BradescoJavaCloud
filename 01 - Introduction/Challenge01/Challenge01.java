/*
 * üöÄ Desafio: Controle de Fluxo üöÄ
 *
 * Neste desafio, vamos colocar em pr√°tica os conceitos de controle de fluxo, implementando a seguinte l√≥gica:
 *
 * üìå O sistema deve receber dois n√∫meros inteiros como par√¢metros via terminal.
 * üìå Com base nesses n√∫meros, o programa calcular√° a quantidade de intera√ß√µes necess√°rias e exibir√° no console a sequ√™ncia num√©rica correspondente.
 * üìå Exemplo:
 *    - Entrada: 12 e 30
 *    - Sa√≠da: "Imprimindo o n√∫mero 1", "Imprimindo o n√∫mero 2", ..., at√© "Imprimindo o n√∫mero 18".
 *
 * ‚ö†Ô∏è Regras:
 * ‚úÖ Se o primeiro n√∫mero for MENOR que o segundo, o programa executar√° um loop (for) para exibir os valores incrementados.
 * ‚ùå Se o primeiro n√∫mero for MAIOR que o segundo, o sistema deve lan√ßar a exce√ß√£o personalizada `ParametrosInvalidosException` com a mensagem:
 *    "O segundo par√¢metro deve ser maior que o primeiro".
 *
 * üìÇ Estrutura do Projeto:
 * - Dentro do projeto, implemente a classe `Challenge01.java`, respons√°vel pela l√≥gica do programa.
 * - Crie a classe `ParametrosInvalidosException.java` para representar a exce√ß√£o personalizada.
 */

import java.util.Scanner;

public class Challenge01 {
  public static void main(String[] Args) {
    Scanner number = new Scanner(System.in);

    try (number) {
      System.out.println("Informe o 1¬∞ n√∫mero: ");
      int num1 = number.nextInt();
      System.out.println("Informe o 2¬∞ n√∫mero: ");
      int num2 = number.nextInt();
      if (num1 >= num2) {
        throw new ParametrosInvalidosException("Error: O n√∫mero 1 deve ser maior que o n√∫mero 2...");
      }

      System.out.println("A sequ√™ncia √©: ");
      for (int i = 1; i <= (num2 - num1); i++) {
        System.out.println("Imprimindo o n√∫mero " + i);
      }
    } catch (ParametrosInvalidosException e) {
      System.out.println(e.getMessage());
    }
  }
}

class ParametrosInvalidosException extends Exception {
  public ParametrosInvalidosException(String message) {
    super(message);
  }
}
